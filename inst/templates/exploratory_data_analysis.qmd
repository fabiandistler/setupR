---
title: Exploratory Data Analysis
author: "John Doe"
date-modified: "`r paste('Last rendered:', Sys.Date())`"
keep-md: false
format: 
  html:
    default: true
    code-fold: true
    toc: true
    self-contained: true
    fig-width: 6
    fig-asp: 0.618
    out-width: "70%"
    fig-align: center
    highlight-style: github
  pptx:
    # reference-doc: template.pptx can add template to folder or quarto
    fig-format: png
    fig-dpi: 300
    fig-width: 10
    fig-asp: 0.618
    fig-align: center
---

```{r setup, include=FALSE}
# Ensures the package "pacman" is installed
if (!require("pacman")) install.packages("pacman")

# Add needed packages here
pacman::p_load()
```

# Load cleaned data.
```{r}
df <- rio::import(df_cleaned)
```


```{r, eval=FALSE,include=FALSE}
# These are interactive helpers which can we useful to get a quick overview of
# your data.

radiant::radiant(df)

DataExplorer::create_report(df)

ggquickeda::run_ggquickeda(df)

esquisse::esquisser(df)

GGally::ggduo(
  data = df,
  # mapping = aes(color = cyl), # Subset data by aes() variable.
  # columnsX = 1:ncol(data), # Columns to choose.
  # columnsY = 1:ncol(data),
  # title = NULL,
  # types = list( # See documentation for available plots.
  #   continuous = "smooth_loess", comboVertical = "box_no_facet",
  #   comboHorizontal = "facethist", discrete = "count"
  # ),
  # axisLabels = c("show", "none"),
  # columnLabelsX = janitor::make_clean_names(names(df),case = "title") # Use nice labels.
  # columnLabelsY = colnames(data[columnsY]),
  # labeller = "label_value", # Labels for facetting.
  # switch = NULL, # Control position of labels.
  # xlab = NULL,
  # ylab = NULL,
  # legend = NULL
)

# Plot outcome with potential explanatory variables.
GGally::ggbivariate(
  data = df,
  outcome,
  explanatory = NULL,
  mapping = NULL, # Same as for ggduo().
  types = NULL,
  ...
)

# Cross tables.
GGally::ggtable(
  df,
  columnsX = 1:ncol(data),
  columnsY = 1:ncol(data),
  cells = c("observed", "prop", "row.prop", "col.prop", "expected", "resid", "std.resid"),
  fill = c("none", "std.resid", "resid"),
  mapping = NULL
)
```

# Look at the data.
```{r}
dplyr::glimpse(df)

str(df)

skimr::skim(df)

Hmisc::describe(df)
```

## Tricks
Add conditional wrappers to only render chunks for certain formats. E.g. you
only want to render certain chunks for Powerpoint and all chunks for html:
<!-- ::: {.content-visible when-format="html"} -->
<!-- ::: -->
Then add slides like this

## Slide title
slide content
